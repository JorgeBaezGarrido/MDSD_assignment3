/**
 * generated by Xtext 2.21.0
 */
package mdsd.generator;

import com.google.common.collect.Iterators;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import mdsd.mathCompiler.Div;
import mdsd.mathCompiler.Expression;
import mdsd.mathCompiler.Expressions;
import mdsd.mathCompiler.External;
import mdsd.mathCompiler.Let;
import mdsd.mathCompiler.MathExp;
import mdsd.mathCompiler.Minus;
import mdsd.mathCompiler.Mult;
import mdsd.mathCompiler.Num;
import mdsd.mathCompiler.Plus;
import mdsd.mathCompiler.Var;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathCompilerGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Expressions maths = Iterators.<Expressions>filter(resource.getAllContents(), Expressions.class).next();
    maths.getExpressions();
    this.computeExpressions(maths);
    System.out.println("-----------------------------------------------------------------");
    System.out.println(this.getExpression(maths));
    fsa.generateFile("MathCompiler.java", this.generateMath(maths));
  }
  
  /**
   * The java file generated.
   */
  public CharSequence generateMath(final Expressions exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MathCompiler {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _checkExternal = this.checkExternal(exp);
      if (_checkExternal) {
        _builder.append("\t");
        CharSequence _externalWrite = this.externalWrite();
        _builder.append(_externalWrite, "\t");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("\t");
        _builder.append("public MathCompiler(){");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void compute(){");
    _builder.newLine();
    _builder.append("\t\t");
    String _expression = this.getExpression(exp);
    _builder.append(_expression, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Will add all the expressions written into the compute() method in the generated java file.
   */
  public String getExpression(final Expressions exp) {
    String complete_expression = "";
    EList<MathExp> _expressions = exp.getExpressions();
    for (final MathExp math : _expressions) {
      {
        String _line = math.getLine();
        String _plus = ("System.out.println(" + _line);
        String _plus_1 = (_plus + "+");
        String _display = this.display(math);
        String _plus_2 = (_plus_1 + _display);
        String soutString = (_plus_2 + ");\n");
        String _complete_expression = complete_expression;
        complete_expression = (_complete_expression + soutString);
      }
    }
    return complete_expression;
  }
  
  /**
   * Checks for if an external has been given by a user.
   */
  public boolean checkExternal(final Expressions exp) {
    EList<MathExp> _expressions = exp.getExpressions();
    for (final MathExp math : _expressions) {
      Expression _exp = math.getExp();
      if ((_exp instanceof External)) {
        return true;
      }
    }
    return false;
  }
  
  /**
   * Will put external function power into the java file.
   */
  public CharSequence externalWrite() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public static interface Externals {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int power(int base, int exponent);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("private Externals externals;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public MathCompiler(Externals _externals){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("externals = _externals;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String displayExp(final Expression exp) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      String _displayExp = this.displayExp(((Plus)exp).getLeft());
      String _plus = (_displayExp + "+");
      String _displayExp_1 = this.displayExp(((Plus)exp).getRight());
      _switchResult = (_plus + _displayExp_1);
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        String _displayExp = this.displayExp(((Minus)exp).getLeft());
        String _plus = (_displayExp + "-");
        String _displayExp_1 = this.displayExp(((Minus)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        String _displayExp = this.displayExp(((Mult)exp).getLeft());
        String _plus = (_displayExp + "*");
        String _displayExp_1 = this.displayExp(((Mult)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        String _displayExp = this.displayExp(((Div)exp).getLeft());
        String _plus = (_displayExp + "/");
        String _displayExp_1 = this.displayExp(((Div)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = Integer.toString(((Num)exp).getValue());
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        _switchResult = ((Var)exp).getId();
      }
    }
    if (!_matched) {
      if (exp instanceof External) {
        _matched=true;
        int _base = ((External)exp).getBase();
        String _plus = ("externals.power(" + Integer.valueOf(_base));
        String _plus_1 = (_plus + ",");
        int _exponent = ((External)exp).getExponent();
        String _plus_2 = (_plus_1 + Integer.valueOf(_exponent));
        _switchResult = (_plus_2 + ")");
      }
    }
    if (!_matched) {
      if (exp instanceof Let) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("let ");
        String _id = ((Let)exp).getId();
        _builder.append(_id);
        _builder.append(" = ");
        String _displayExp = this.displayExp(((Let)exp).getBinding());
        _builder.append(_displayExp);
        _builder.append(" in ");
        String _displayExp_1 = this.displayExp(((Let)exp).getBody());
        _builder.append(_displayExp_1);
        _builder.append(" end");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      throw new Error("Invalid expression");
    }
    String _plus = ("(" + _switchResult);
    return (_plus + ")");
  }
  
  /**
   * Interpreter code from here.
   */
  public int computeExpressions(final Expressions exp) {
    int _xblockexpression = (int) 0;
    {
      EList<MathExp> _expressions = exp.getExpressions();
      for (final MathExp math : _expressions) {
        {
          final int result = this.compute(math);
          String _display = this.display(math);
          String _plus = ("Math expression = " + _display);
          System.out.println(_plus);
          JOptionPane.showMessageDialog(null, ("result = " + Integer.valueOf(result)), "Math Language", JOptionPane.INFORMATION_MESSAGE);
        }
      }
      _xblockexpression = 0;
    }
    return _xblockexpression;
  }
  
  public int compute(final MathExp math) {
    Expression _exp = math.getExp();
    HashMap<String, Integer> _hashMap = new HashMap<String, Integer>();
    return this.computeExp(_exp, _hashMap);
  }
  
  public int computeExp(final Expression exp, final Map<String, Integer> env) {
    Integer _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      int _computeExp = this.computeExp(((Plus)exp).getLeft(), env);
      int _computeExp_1 = this.computeExp(((Plus)exp).getRight(), env);
      _switchResult = Integer.valueOf((_computeExp + _computeExp_1));
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        int _computeExp = this.computeExp(((Minus)exp).getLeft(), env);
        int _computeExp_1 = this.computeExp(((Minus)exp).getRight(), env);
        _switchResult = Integer.valueOf((_computeExp - _computeExp_1));
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        int _computeExp = this.computeExp(((Mult)exp).getLeft(), env);
        int _computeExp_1 = this.computeExp(((Mult)exp).getRight(), env);
        _switchResult = Integer.valueOf((_computeExp * _computeExp_1));
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        int _computeExp = this.computeExp(((Div)exp).getLeft(), env);
        int _computeExp_1 = this.computeExp(((Div)exp).getRight(), env);
        _switchResult = Integer.valueOf((_computeExp / _computeExp_1));
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = Integer.valueOf(((Num)exp).getValue());
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        _switchResult = env.get(((Var)exp).getId());
      }
    }
    if (!_matched) {
      if (exp instanceof External) {
        _matched=true;
        int _xblockexpression = (int) 0;
        {
          int temp = ((External)exp).getBase();
          for (int i = 1; (i < ((External)exp).getExponent()); i++) {
            int _base = ((External)exp).getBase();
            int _multiply = (temp * _base);
            temp = _multiply;
          }
          _xblockexpression = temp;
        }
        _switchResult = Integer.valueOf(_xblockexpression);
      }
    }
    if (!_matched) {
      if (exp instanceof Let) {
        _matched=true;
        _switchResult = Integer.valueOf(this.computeExp(((Let)exp).getBody(), this.bind(env, ((Let)exp).getId(), this.computeExp(((Let)exp).getBinding(), env))));
      }
    }
    if (!_matched) {
      throw new Error("Invalid expression");
    }
    return (_switchResult).intValue();
  }
  
  public Map<String, Integer> bind(final Map<String, Integer> env1, final String name, final int value) {
    HashMap<String, Integer> _xblockexpression = null;
    {
      final HashMap<String, Integer> env2 = new HashMap<String, Integer>(env1);
      env2.put(name, Integer.valueOf(value));
      _xblockexpression = env2;
    }
    return _xblockexpression;
  }
  
  public String display(final MathExp math) {
    return this.displayExp(math.getExp());
  }
}
